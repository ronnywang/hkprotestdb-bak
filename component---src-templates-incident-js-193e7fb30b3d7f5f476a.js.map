{"version":3,"sources":["webpack:///./src/templates/Incident.js"],"names":["IncidentTemplate","pageContext","localePath","allIncidents","incident","data","cms","useTranslation","i18n","t","classes","useBasicStyle","thisIncident","incidentIndex","findIndex","c","id","otherIncidents","slice","useState","selectedLegendId","setSelectedLegendId","defendants","setDefendants","isLoading","setIsLoading","useEffect","a","fetch","window","location","origin","then","responses","json","fetchData","selectedDefendants","map","defendent","person","status","defendantColor","case","filter","d","includes","sort","b","statusPriority","s","title","withLanguage","description","images","Array","keys","i","url","replace","align","alignMobile","className","count","length","descriptionWrapper","dangerouslySetInnerHTML","__html","marked","legendWrapper","filterable","type","activeId","handleClick","clickedIndex","items","trackCustomEvent","event_category","event_label","context","fullWidthSecondary","padding","enableImage","name","imgUrl","image_url","to","page","lang","language","obj","countText","defendantCount","query"],"mappings":"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","file":"component---src-templates-incident-js-193e7fb30b3d7f5f476a.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport SEO from \"@/components/SEO\"\nimport { withLanguage } from \"@/utils/i18n\"\nimport Layout from \"@/components/Layout\"\nimport { graphql } from \"gatsby\"\nimport CentreContainer from \"@/components/Container\"\nimport FullWidthImage from \"@/components/Swiper/FullWidthImage\"\nimport RelatedCard from \"@/components/Swiper/RelatedCard\"\nimport { defendantColor, statusPriority } from \"@/utils/defendant\"\nimport { useBasicStyle } from \"@/theme\"\nimport { StickyCard } from \"@/components/StickyCard\"\nimport Legend from \"@/components/Legend\"\nimport marked from \"marked\"\nimport Back from \"@/components/Back\"\nimport DefendantDots from \"@/DefendantDots\"\nimport Loader from \"@/components/Loader\"\nimport { trackCustomEvent } from \"@/utils/ga\"\n\nconst IncidentTemplate = ({\n  pageContext: { localePath, allIncidents },\n  data: {\n    cms: { incident },\n  },\n}) => {\n  const { i18n, t } = useTranslation()\n  const classes = useBasicStyle()\n\n  const [thisIncident] = incident\n  const incidentIndex = allIncidents.findIndex(c => c.id === thisIncident.id)\n  const otherIncidents = [\n    ...allIncidents.slice(incidentIndex + 1),\n    ...allIncidents.slice(0, incidentIndex),\n  ]\n\n  const [selectedLegendId, setSelectedLegendId] = useState(-1)\n\n  const [defendants, setDefendants] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let data = await fetch(\n        `${window.location.origin}/data/incidents/${thisIncident.id}.json`\n      ).then(responses => responses.json())\n\n      setDefendants(data.defendants)\n      setIsLoading(false)\n    }\n\n    fetchData()\n  }, [])\n\n  const selectedDefendants = defendants\n    .map(defendent => ({\n      id: defendent.person.id,\n      ...defendent,\n      status: {\n        ...defendent.status,\n        ...defendantColor.case[`status${defendent.status.id || 0}`],\n      },\n    }))\n    .filter(\n      d => selectedLegendId == -1 || [selectedLegendId].includes(d.status.id)\n    )\n    .sort((a, b) => {\n      if (!a.status || !b.status) {\n        return -1\n      }\n      return (\n        statusPriority.findIndex(s => s === a.status.id) -\n        statusPriority.findIndex(s => s === b.status.id)\n      )\n    })\n\n  return (\n    <div>\n      <Layout localePath={localePath}>\n        <SEO\n          title={withLanguage(i18n, thisIncident, \"name\")}\n          description={withLanguage(i18n, thisIncident, \"desc\")}\n        />\n        <div>\n          <FullWidthImage\n            images={[...Array(5).keys()]\n              .map(i => ({\n                url:\n                  (thisIncident[`image_${i + 1}_url`] &&\n                    thisIncident[`image_${i + 1}_url`].replace(\n                      \"raw\",\n                      \"large\"\n                    )) ||\n                  null,\n                align: thisIncident[`image_${i + 1}_align`],\n                alignMobile: thisIncident[`image_${i + 1}_align_mobile`],\n              }))\n              .filter(a => a.url)}\n          >\n            <div className=\"header\">\n              <div className=\"header__Name\">\n                {withLanguage(i18n, thisIncident, \"name\")}\n              </div>\n              <div className=\"header__DefendantCount\">\n                {t(\"common.defendant_count\", { count: defendants.length })}\n              </div>\n            </div>\n          </FullWidthImage>\n          <CentreContainer>\n            <Back />\n          </CentreContainer>\n          <CentreContainer>\n            <div\n              className={classes.descriptionWrapper}\n              dangerouslySetInnerHTML={{\n                __html: marked(withLanguage(i18n, thisIncident, \"desc\")),\n              }}\n            />\n          </CentreContainer>\n          <div className={classes.legendWrapper}>\n            <Legend\n              filterable={true}\n              type=\"incidents\"\n              activeId={selectedLegendId}\n              handleClick={(clickedIndex, items) => {\n                setSelectedLegendId(\n                  items[clickedIndex].id == selectedLegendId\n                    ? -1\n                    : items[clickedIndex].id\n                )\n                trackCustomEvent(\"Click\", {\n                  event_category: \"Legend\",\n                  event_label: `${withLanguage(i18n, thisIncident, \"name\")} - ${\n                    items[clickedIndex].title\n                  }`,\n                })\n              }}\n            />\n          </div>\n          <CentreContainer>\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <DefendantDots\n                selectedDefendants={selectedDefendants}\n                context=\"status\"\n              />\n            )}\n          </CentreContainer>\n          <div className={classes.fullWidthSecondary}>\n            <CentreContainer padding={0}>\n              <RelatedCard\n                enableImage={true}\n                items={otherIncidents.map(incident => ({\n                  id: incident.id,\n                  name: withLanguage(i18n, incident, \"name\"),\n                  imgUrl: incident.image_url,\n                  to: {\n                    page: \"template-incident\",\n                    lang: i18n.language,\n                    obj: incident,\n                  },\n                  countText: t(\"common.defendant_count\", {\n                    count: incident.defendantCount,\n                  }),\n                }))}\n              />\n            </CentreContainer>\n          </div>\n          <StickyCard />\n        </div>\n      </Layout>\n    </div>\n  )\n}\n\nexport default IncidentTemplate\n\nexport const query = graphql`\n  query IncidentQuery($incidentId: Int!) {\n    cms {\n      incident: incidents(where: { id: { _eq: $incidentId } }) {\n        ...IncidentBasicInfo\n        desc_zh\n        desc_en\n        image_1_url: image_url\n        image_2_url\n        image_3_url\n        image_4_url\n        image_5_url\n        image_1_align: image_align\n        image_1_align_mobile: image_align_mobile\n        image_2_align\n        image_2_align_mobile\n        image_3_align\n        image_3_align_mobile\n        image_4_align\n        image_4_align_mobile\n        image_5_align\n        image_5_align_mobile\n      }\n      defendants: people(\n        where: {\n          case_person: { case: { incident: { id: { _eq: $incidentId } } } }\n        }\n      ) {\n        id\n        initial_zh\n        initial_en\n        hide_name\n        gender\n        image_url\n        case_person(\n          where: { case: { incident: { id: { _eq: $incidentId } } } }\n        ) {\n          arrest_age\n          occupation {\n            type_zh\n            type_en\n          }\n          status {\n            id\n            type_zh\n            type_en\n          }\n        }\n      }\n      case_person_status {\n        id\n        type_zh\n        type_en\n      }\n    }\n  }\n`\n"],"sourceRoot":""}